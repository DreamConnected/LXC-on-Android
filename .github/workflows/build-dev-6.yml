name: Build lxc dev master

on:
  workflow_dispatch:
    inputs:
      lxc_version:
        description: 'LXC version'
        required: true
        default: '6.0.0'
      build_utils:
        description: 'openssl,dbus,libselinux,libcap,libseccomp,libapparmor'
        required: false
        default: 'true,true,true,true,true,true'

jobs:
  Build-dev-6:
    runs-on: ubuntu-22.04-arm
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: | 
             sudo apt-get update -qq
             sudo apt-get install -qq --yes \
                  apparmor bash-completion bridge-utils build-essential \
                  busybox-static clang cloud-image-utils curl dbus debhelper debootstrap \
                  devscripts dnsmasq-base docbook2x doxygen ed fakeroot file gcc-12 g++-12 cmake graphviz \
                  git iptables net-tools libapparmor-dev libcap-dev libgnutls28-dev liblua5.2-dev \
                  libpam0g-dev libseccomp-dev libselinux1-dev libtool linux-libc-dev libpam-dev libssl-dev \
                  llvm lsb-release make openssl pkg-config python3-all-dev liburing-dev libpthread-stubs0-dev \
                  python3-setuptools rsync squashfs-tools uidmap unzip uuid-runtime systemd ninja-build libdbus-1-3 \
                  wget xz-utils systemd-coredump libdbus-1-dev libsystemd-dev gcc-aarch64-linux-gnu meson 
             sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 20 --slave /usr/bin/g++ g++ /usr/bin/g++-12
             sudo apt-get remove --yes lxc-utils liblxc-common liblxc1 liblxc-dev
             #sudo apt install -y -qq pipx
             #pipx install meson

      - name: Set build parameters
        id: vars
        run: |
          echo "lxc_version=${{ github.event.inputs.lxc_version || '6.0.0' }}" >> $GITHUB_OUTPUT
          echo "build_utils=${{ github.event.inputs.build_utils || 'true,true,true,true,true,true' }}" >> $GITHUB_OUTPUT

      - name: Get target lxc version
        id: env
        run: |
          export VERSION=${{ steps.vars.outputs.lxc_version }}
          
          wget https://github.com/lxc/lxc/releases/download/v$VERSION/lxc-$VERSION.tar.gz
          tar -zxf lxc-$VERSION.tar.gz && mv lxc-$VERSION lxc
          cd lxc
          lxc_source_dir=$(pwd)
          echo "lxc_source_dir=$lxc_source_dir" >> $GITHUB_OUTPUT
          cd ../
          work_dir=$(pwd)
          echo "work_dir=$work_dir" >> $GITHUB_OUTPUT

      - name: Patch lxc
        run: |
            sed -i "s/threads = dependency('threads')/threads = dependency('threads', static : true)/g" $lxc_source_dir/meson.build
            sed -i "s/libseccomp = dependency('libseccomp', required: false)/libseccomp = dependency('libseccomp', required: false,static : true)/g" $lxc_source_dir/meson.build
            sed -i "s/libselinux = dependency('libselinux', required: false)/libselinux = dependency('libselinux', required: false,static : true)/g" $lxc_source_dir/meson.build
            sed -i "s/libapparmor = dependency('libapparmor', required: false)/libapparmor = dependency('libapparmor', required: false,static : true)/g" $lxc_source_dir/meson.build
            sed -i "s/libopenssl = dependency('openssl', required: false)/libopenssl = dependency('openssl', required: false,static : true)/g" $lxc_source_dir/meson.build
            sed -i "s/libcap = dependency('libcap', required: false)/libcap = dependency('libcap', required: false,static : true)/g" $lxc_source_dir/meson.build

            sed -i "s/liblxc = shared_library(/liblxc = static_library(/g" $lxc_source_dir/meson.build
            sed -i '/version: liblxc_version,/d' $lxc_source_dir/meson.build

            sed -i "s/cpuset.cpus/cpus/g" $lxc_source_dir/src/lxc/cgroups/cgfsng.c
            sed -i "s/cpuset.mems/mems/g" $lxc_source_dir/src/lxc/cgroups/cgfsng.c

            echo "The lxc version $latest_version is patch completed"

      - name: Build lxc with NDK r26b Android API 26
        run: |
          lxc_source_dir=${{ steps.env.outputs.lxc_source_dir }}
          work_dir=${{ steps.env.outputs.work_dir }}
          mv ndk.patch lxc/
          cd lxc
          PATH=$work_dir/.local/bin:$PATH
          patch -p0 -R < ndk.patch
          meson setup build -Dprefix=/data/lxc \
                            -Dinit-script=sysvinit \
                            -Druntime-path=/data/local/tmp \
                            -Dstrip=true \
                            -Dd_lto=true \
                            -Dcapabilities=true \
                            -Dseccomp=true \
                            -Dselinux=true \
                            -Dapparmor=true \
                            -Dopenssl=true \
                            -Ddbus=true \
                            -Dlog-path=/data/lxc/var/log/lxc \
                            -Ddata-path=/data/lxc/lib/lxc \
                            --localstatedir=/data/lxc/var \
                            --buildtype release
          meson compile -C build
          sudo ninja -C build install
          sudo bash -c "cd /data/lxc && tar -zcvf $work_dir/$latest_version-ndk-api26-release.tar.gz ."

      - name: Upload NDK release file
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.env.outputs.latest_version }}-ndk-api26-release-shared
          path: ${{ steps.env.outputs.latest_version }}-ndk-api26-release.tar.gz

      - name: Create Release and Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.env.outputs.latest_version }}
          name: Release ${{ steps.env.outputs.latest_version }}
          body: TODO New Release for dev 6.0.0 and later.
          draft: false
          prerelease: true
          files: |
            ${{ steps.env.outputs.latest_version }}-ndk-api26-release.tar.gz
